{"version":3,"sources":["components/Redux/middlewear/logger.js","components/Servises/api.js","components/Redux/Contacts/contactsOperations.js","components/Redux/Contacts/contactsSlice.js","components/Redux/store .js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/App/App.jsx","index.js"],"names":["customMiddlewareLogger","store","next","action","payload","console","log","type","BASE_URL","fetchData","path","a","options","fetch","res","ok","json","Promise","reject","Error","statusText","API_ENDPOINT","getContacts","createAsyncThunk","addContact","newCity","endpoint","item","finalOptions","method","body","JSON","stringify","headers","api","deleteContact","id","conatactsSlice","createSlice","name","initialState","items","filter","reducers","chengeFilter","state","extraReducers","builder","addCase","fulfilled","idx","findIndex","contact","splice","actions","persistContactsConfig","key","storage","whitelist","configureStore","reducer","contacts","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","devTools","process","persistor","persistStore","ContactForm","onSubmit","useState","setName","number","setNumber","className","e","preventDefault","pattern","title","required","value","onChange","target","ContactList","onDelete","useSelector","normalizedFilter","toLowerCase","includes","filteredContacts","map","phone","onClick","Filter","dispatch","useDispatch","contactsActions","App","useEffect","some","alert","newContact","nanoid","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.907a61ff.chunk.js","sourcesContent":["const myMiddleware = store => next => action => {\r\n  console.group(action.type);\r\n  const prevState = store.getState();\r\n  console.log('prevState', prevState);\r\n  console.info('action', action);\r\n  const result = next(action);\r\n  const newState = store.getState();\r\n  console.log('newState', newState);\r\n  console.groupEnd();\r\n  return result;\r\n};\r\n\r\nconst customMiddlewareLogger = store => next => action => {\r\n  if (action.payload) {\r\n    console.log(`%c ${action.type}:`, 'color: #6a0', action.payload);\r\n  }\r\n  return next(action);\r\n};\r\n\r\nexport { customMiddlewareLogger, myMiddleware };\r\n","const BASE_URL = 'https://61c4ceeef1af4a0017d997e8.mockapi.io';\r\n\r\nconst fetchData = async (path, options = {}) => {\r\n  const res = await fetch(`${BASE_URL}/${path}`, options);\r\n  return res.ok ? res.json() : Promise.reject(new Error(res.statusText));\r\n};\r\n\r\nconst getData = (endpoint, options) => fetchData(endpoint, options);\r\n\r\nconst saveItem = (endpoint, item, options = {}) => {\r\n  const finalOptions = {\r\n    method: 'POST',\r\n    body: JSON.stringify(item),\r\n    headers: {\r\n      'Content-Type': 'application/json; charset=UTF-8',\r\n    },\r\n    ...options,\r\n  };\r\n  return fetchData(endpoint, finalOptions);\r\n};\r\n\r\nconst deleteItem = (endpoint, id, options = {}) =>\r\n  fetchData(`${endpoint}/${id}`, { method: 'DELETE', ...options });\r\n\r\nexport { getData, saveItem, deleteItem };\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport * as api from '../../Servises/api';\r\n\r\nconst API_ENDPOINT = 'contacts';\r\n\r\nconst getContacts = createAsyncThunk('contacts/getContactsStatus', () =>\r\n  api.getData(API_ENDPOINT),\r\n);\r\n\r\nconst addContact = createAsyncThunk('contacts/addContactStatus', newCity =>\r\n  api.saveItem(API_ENDPOINT, newCity),\r\n);\r\n\r\nconst deleteContact = createAsyncThunk('contacts/deleteContactStatus', id =>\r\n  api.deleteItem(API_ENDPOINT, id),\r\n);\r\n\r\nexport { getContacts, addContact, deleteContact };\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getContacts, addContact, deleteContact } from './contactsOperations';\r\n\r\nconst initialState = {\r\n  items: [],\r\n  filter: '',\r\n};\r\n\r\nconst conatactsSlice = createSlice({\r\n  name: 'contacts',\r\n  initialState,\r\n  reducers: {\r\n    chengeFilter: (state, action) => ({ ...state, filter: action.payload }),\r\n  },\r\n  extraReducers: builder => {\r\n    builder\r\n      .addCase(getContacts.fulfilled, (state, { payload }) => {\r\n        state.items = payload;\r\n      })\r\n      .addCase(addContact.fulfilled, (state, action) => ({\r\n        ...state,\r\n        items: [action.payload, ...state.items],\r\n      }))\r\n      .addCase(deleteContact.fulfilled, (state, { payload }) => {\r\n        const idx = state.items.findIndex(contact => contact.id === payload.id);\r\n        state.items.splice(idx, 1);\r\n      });\r\n  },\r\n});\r\n\r\nexport const { chengeFilter } = conatactsSlice.actions;\r\n\r\nexport default conatactsSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { customMiddlewareLogger } from './middlewear/logger';\r\nimport {\r\n  persistReducer,\r\n  persistStore,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\n\r\nimport contactsReducer from './Contacts/contactsSlice';\r\n\r\nconst persistContactsConfig = {\r\n  key: 'filter',\r\n  storage,\r\n  whitelist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(persistContactsConfig, contactsReducer),\r\n  },\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(customMiddlewareLogger),\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","import { useState } from \"react\";\r\nimport \"./ContactForm.css\";\r\n\r\nconst ContactForm = ({ onSubmit }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  ////// записує контакт\r\n\r\n  const handleChangeName = ({ target }) => {\r\n    const { value } = target;\r\n    setName(value);\r\n  };\r\n\r\n  const handleChangeNumber = ({ target }) => {\r\n    const { value } = target;\r\n    setNumber(value);\r\n  };\r\n\r\n  ////передає імя і тел\r\n  const handelSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSubmit({ name, number });\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className=\"heading\" onSubmit={handelSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            required\r\n            value={name}\r\n            onChange={handleChangeName}\r\n          />\r\n        </label>\r\n        <label>\r\n          Phone\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            required\r\n            value={number}\r\n            onChange={handleChangeNumber}\r\n          />\r\n        </label>\r\n        <button className=\"button8\" type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import './ContactList.css';\r\nimport { useSelector } from 'react-redux';\r\n// import { contactsActions } from '../Redux/Contacts';\r\n\r\n  \r\n\r\n\r\nconst ContactList = ({  onDelete }) => {\r\n\r\n  const filter = useSelector((state) => state.contacts.filter);\r\n  const contacts = useSelector(state => state.contacts.items);\r\n  \r\n  const filteredContacts = () => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    console.log(contacts)\r\n\r\n    return contacts.filter(({ name }) =>\r\n      name?.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  };\r\n\r\n\r\n  return (\r\n\r\n\r\n    <ul className=\"list\">\r\n      {filteredContacts().map(({ id, name, phone  }) => (\r\n        <>\r\n          <li className=\"item\" key={id}>\r\n            {name} : {phone}\r\n          </li>\r\n          <button className=\"button9\" type=\"button\" onClick={onDelete(id)}>\r\n            Delete {name}\r\n          </button>\r\n        </>\r\n      ))}\r\n    </ul>\r\n  );\r\n\r\n  \r\n}\r\nexport default ContactList;\r\n","// import PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n//import { changeFilter } from '../Redux/Contacts/contactsActions';\r\nimport { contactsActions } from '../Redux/Contacts';\r\n\r\nconst Filter = ({ onChange }) => {\r\n\r\n  const filter = useSelector((state) => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <label className=\"heading\">\r\n      Find contact by name\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n        required\r\n        value={filter}\r\n        onChange={e => dispatch(contactsActions.chengeFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n\r\n  // Filter.propTypes = {\r\n  //   onChange: PropTypes.func,\r\n  // };\r\n};\r\nexport default Filter;\r\n","import { useEffect } from \"react\";\r\nimport ContactForm from \"../ContactForm/ContactForm\";\r\nimport ContactList from \"../ContactList/ContactList\";\r\nimport Filter from \"../Filter/Filter\";\r\n// import * as storage from \"../Servises/localStorage\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n//import { setContacts, addContacts, deleteContacts } from '../Redux/Contacts/contactsActions';\r\n//import * as actions from 'redux/cities/citiesActions';\r\nimport {\r\n  getContacts,\r\n  addContact,\r\n  deleteContact,\r\n} from \"../Redux/Contacts/contactsOperations\";\r\n\r\n\r\n\r\nimport { nanoid } from \"nanoid\";\r\n\r\n\r\nconst App = () => {\r\n  \r\n\r\n\r\n  const contacts = useSelector((state) => state.contacts.items);\r\n  const filter = useSelector((state) => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch(getContacts());\r\n  }, [dispatch]);\r\n\r\n\r\n  ////////додає контакт\r\n\r\n  const addContacts1 = ({ name, number }) => {\r\n    if (\r\n      contacts.some(\r\n        (contact) =>\r\n          contact.name?.toLowerCase() === name.toLowerCase()\r\n      )\r\n    ) {\r\n      alert(`name \"${name}\" is already in list`);\r\n      return;\r\n    }\r\n    const newContact = {\r\n      id: nanoid(),\r\n      name: name,\r\n      phone: number,\r\n    };\r\n    console.log(newContact);\r\n    dispatch(addContact(newContact));\r\n\r\n  };\r\n  // шукає контакт\r\n\r\n  const handleFilterChange = (value) => {\r\n    filter(value);\r\n  };\r\n\r\n  ////видаляє контакт\r\n\r\n\r\n  const deleteContacts1 = (id) => () => {\r\n  dispatch(deleteContact(id));\r\n  };\r\n \r\n  return (\r\n    <div>\r\n      <h1>Phonebooc</h1>\r\n      <ContactForm onSubmit={addContacts1} />\r\n\r\n      <Filter\r\n        //value={filter}\r\n        onChange={(e) => handleFilterChange(e.target.value)}\r\n      />\r\n\r\n      <ContactList\r\n        onDelete={deleteContacts1}\r\n        // filteredContacts={getFilteredContacts()}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { store, persistor } from './components/Redux/store ';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}